#!/usr/bin/env python3.9

import datetime
import time
import sys
import dpkt
import socket


def print_packet_info(ts, src_ip, dst_ip, src_port, dst_port, protocol, pkt_len, ttl):
    utc_time = str(datetime.datetime.utcfromtimestamp(ts))
    log_line = f"[{utc_time}] - {src_ip}:{src_port} -> {dst_ip}:{dst_port} ({protocol}, len={pkt_len}, ttl={ttl})"
    print(f"{log_line}")


def print_summary(total_packet_count, total_bytes_count, average_packet_size):
    print('\n------------------- SUMMARY -------------------\n')
    print(f"Total packets: {total_packet_count}")
    print(f"Total bytes (bytes): {total_bytes_count}")
    print(f"Average packet size (bytes): {average_packet_size}")
    print('\n-----------------------------------------------')


def main():
    if len(sys.argv) != 2:
        print("Usage: ./mtcpdump <pcap_file>")
        sys.exit(1)
    try:
        pcap_file = sys.argv[1]
        pcap = dpkt.pcap.Reader(open(pcap_file, 'rb'))
    except FileNotFoundError:
        print(f"File {pcap_file} not found")
        sys.exit(1)
    total_packet_count = 0
    total_bytes_count = 0

    for ts, buf in pcap:
        eth = dpkt.ethernet.Ethernet(buf)
        if not isinstance(eth.data, dpkt.ip.IP):
            print(f"Skipping non-IP packet")
            continue
        ip = eth.data
        #print (f"Test IP: {ip}")
        if not isinstance(ip.data, dpkt.tcp.TCP) and not isinstance(ip.data, dpkt.udp.UDP):
            print(f"Skipping non-TCP and non-UDP packets")
            continue
        tcp = ip.data
        #print (f"Test TCP: {tcp}")
        src_ip = socket.inet_ntoa(ip.src)
        dst_ip = socket.inet_ntoa(ip.dst)
        src_port = tcp.sport
        dst_port = tcp.dport
        #print (f"dpkt.ip.IP_PROTO_TCP: {dpkt.ip.IP_PROTO_TCP}")
        #print (f"dpkt.ip.IP_PROTO_UDP: {dpkt.ip.IP_PROTO_UDP}")
        if ip.p == dpkt.ip.IP_PROTO_TCP:
            protocol = 'tcp'
        elif ip.p == dpkt.ip.IP_PROTO_UDP:
            protocol = 'udp'
        pkt_len = ip.len
        ttl = ip.ttl
        total_packet_count += 1
        total_bytes_count += pkt_len
        print_packet_info(ts, src_ip, dst_ip, src_port, dst_port, protocol, pkt_len, ttl)   
    print_summary(total_packet_count, total_bytes_count, int(total_bytes_count/total_packet_count))
if __name__ == "__main__":
    main()

